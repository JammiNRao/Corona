patents$country
levels(patents$country)
levels(patents$country) <- levels(patents$country[6:1])
levels(patents$country)
?geom_col
vignette("ggplot2-specs")
p <- ggplot(data=patents,
aes(x=country, y = patents)) + geom_col(width = 0.3, fill = "light blue")
p
p <- ggplot(data=patents,
aes(x=country, y = patents)) + geom_col(width = 0.3, fill = "red")
p
?geom_lollipop
p <- ggplot(data=patents,
aes(x=country, y = patents)) + geom_dotplot(width = 0.3, fill = "red")
p
p <- ggplot(data=patents,
aes(x=country, y = patents)) + geom_col(width = 0.3, fill = "red")
p
p + labs(title = "This is an upright bar chart",
x = "Country",
y = "No of patents 2017-18 per million population")
p + geom_text(aes(label = patents))
p + geom_text(aes(label = patents), vjust = 1.5)
p + geom_text(aes(label = patents), vjust = -2)
p + geom_text(aes(label = patents), vjust = -1.5)
p + geom_text(aes(label = patents), vjust = -1)
p + geom_text(aes(label = patents), vjust = -0.8)
p + geom_text(aes(label = patents), vjust = -0.6)
p <- ggplot(data=patents,
aes(x=country, y = patents)) + geom_col(width = 0.3, fill = "red")
p <- p + labs(title = "This is an upright bar chart",
xlab() = "Country",
p <- ggplot(data=patents,
aes(x=country, y = patents)) + geom_col(width = 0.3, fill = "red")
p <- p + labs(title = "This is an upright bar chart",
xlab = "Country",
ylab = "No of patents 2017-18 per million population")
p
?labs
p <- ggplot(data=patents,
aes(x=country, y = patents)) + geom_col(width = 0.3, fill = "red")
p <- p + labs(title = "This is an upright bar chart") +
xlab("Country") +
ylab("No of patents 2017-18 per million population")
p
p + geom_text(aes(label = patents), vjust = -0.6)
m1 <- matrix(c(2,3,4,5))
m1
m2 <- matrix(c(3,4,5))
m2
m1+m2
m1 * m2
m2 * m1
m3 <- matrix(c3,4,5,6)
m3 <- matrix(c3,4,5,6))
m3 <- matrix(c(3,4,5,6))
m3
m1 + m3
m1 * m3
m <- matrix(m1+m3, m1*m3)
m <- matrix(c(m1+m3, m1*m3))
m
m <- matrix(c(m1+m3, m1*m3), 2,4)
m
m <- matrix(c(m1+m3, m1*m3), 4,2)
m
m <- matrix(c(m1,m3,m1+m3, m1*m3), 4,4)
m
inv(m)
inverse(m)
m^-1
m*m^-1
x <- runif(1000, min=3, max = 20) # x values
y <- sapply(x, FUN = function(x) {x + rnorm(mean=70, sd=3, n=1)})
## creates a somewhat randon y-value for each x-value
## the spread is determined by the spec for sd in the cvall to rnorm()
dat = data.frame(x = round(x, 1),y = round(y,1))
stem(y)
hist(y)
range(y)
plot(y)
ln(5/2.9)
exp(2)
exp(5/2.9)
exp(5/2.9) / 7
exp(1)
log(5/2.9)
log(5/2.9) /7
?roots
??operators
nthroot(100,2)
exp(100)
exp(1)
exp(2)
2.718282^2
exp(1/2)
1.648721^2
exp(2.9/5)
2.9* (1.786038)^7
2.9 * (1.0786038)^7
2.9 * 1.08^7
exp(2.9/5) -1
exp(5/2.9/7)
install.packages("xlsx")
library(xlsx)
d <- read.slsx(http://www.policyuncertainty.com/media/India_Policy_Uncertainty_Data.xlsx)
d <- read.slsx(http:\\www.policyuncertainty.com/media\India_Policy_Uncertainty_Data.xlsx)
d <- read.slsx("www.policyuncertainty.com/media\India_Policy_Uncertainty_Data.xlsx")
d <- read.slsx("www.policyuncertainty.com\media\India_Policy_Uncertainty_Data.xlsx")
d <- read.slsx("www.policyuncertainty.com/media/India_Policy_Uncertainty_Data.xlsx")
d <- read.xlsx("www.policyuncertainty.com/media/India_Policy_Uncertainty_Data.xlsx")
library(xlsx)
read.txt("Year	Month	Мin	Max	Close	Tot,%
2019	July	67.70	69.76	68.73	-0.30%
2019	August	67.56	69.62	68.59	-0.51%
2019	September	66.95	68.99	67.97	-1.41%
2019	October	66.89	68.93	67.91	-1.49%
2019	November	67.33	69.39	68.36	-0.84%
2019	December	65.99	68.36	66.99	-2.83%
2020	January	65.85	67.85	66.85	-3.03%
2020	February	66.85	69.07	68.05	-1.29%
2020	March	65.69	68.05	66.69	-3.26%
2020	April	66.69	68.99	67.97	-1.41%
2020	May	67.97	70.37	69.33	0.57%
2020	June	69.33	71.78	70.72	2.58%
2020	July	69.74	71.86	70.80	2.70%
2020	August	70.78	72.94	71.86	4.24%
2020	September	71.85	74.03	72.94	5.80%
2020	October	72.94	75.52	74.40	7.92%
2020	November	73.19	75.41	74.30	7.77%
2020	December	74.30	76.93	75.79	9.94%
2021	January	74.31	76.57	75.44	9.43%
2021	February	73.56	75.80	74.68	8.33%
2021	March	73.25	75.49	74.37	7.88%
2021	April	72.65	74.87	73.76	6.99%
2021	May	73.76	76.37	75.24	9.14%
2021	June	73.79	76.03	74.91	8.66%
2021	July	73.29	75.53	74.41	7.93%")
libary(readr)
library(readr)
read.txt("Year	Month	Мin	Max	Close	Tot,%
2019	July	67.70	69.76	68.73	-0.30%
2019	August	67.56	69.62	68.59	-0.51%
2019	September	66.95	68.99	67.97	-1.41%
2019	October	66.89	68.93	67.91	-1.49%
2019	November	67.33	69.39	68.36	-0.84%
2019	December	65.99	68.36	66.99	-2.83%
2020	January	65.85	67.85	66.85	-3.03%
2020	February	66.85	69.07	68.05	-1.29%
2020	March	65.69	68.05	66.69	-3.26%
2020	April	66.69	68.99	67.97	-1.41%
2020	May	67.97	70.37	69.33	0.57%
2020	June	69.33	71.78	70.72	2.58%
2020	July	69.74	71.86	70.80	2.70%
2020	August	70.78	72.94	71.86	4.24%
2020	September	71.85	74.03	72.94	5.80%
2020	October	72.94	75.52	74.40	7.92%
2020	November	73.19	75.41	74.30	7.77%
2020	December	74.30	76.93	75.79	9.94%
2021	January	74.31	76.57	75.44	9.43%
2021	February	73.56	75.80	74.68	8.33%
2021	March	73.25	75.49	74.37	7.88%
2021	April	72.65	74.87	73.76	6.99%
2021	May	73.76	76.37	75.24	9.14%
2021	June	73.79	76.03	74.91	8.66%
2021	July	73.29	75.53	74.41	7.93%")
?read.txt
?read.table(Year	Month	Мin	Max	Close	Tot,%
2019	July	67.70	69.76	68.73	-0.30%
2019	August	67.56	69.62	68.59	-0.51%
2019	September	66.95	68.99	67.97	-1.41%
2019	October	66.89	68.93	67.91	-1.49%
2019	November	67.33	69.39	68.36	-0.84%
2019	December	65.99	68.36	66.99	-2.83%
2020	January	65.85	67.85	66.85	-3.03%
2020	February	66.85	69.07	68.05	-1.29%
2020	March	65.69	68.05	66.69	-3.26%
2020	April	66.69	68.99	67.97	-1.41%
2020	May	67.97	70.37	69.33	0.57%
2020	June	69.33	71.78	70.72	2.58%
2020	July	69.74	71.86	70.80	2.70%
2020	August	70.78	72.94	71.86	4.24%
2020	September	71.85	74.03	72.94	5.80%
2020	October	72.94	75.52	74.40	7.92%
2020	November	73.19	75.41	74.30	7.77%
2020	December	74.30	76.93	75.79	9.94%
2021	January	74.31	76.57	75.44	9.43%
2021	February	73.56	75.80	74.68	8.33%
2021	March	73.25	75.49	74.37	7.88%
2021	April	72.65	74.87	73.76	6.99%
2021	May	73.76	76.37	75.24	9.14%
2021	June	73.79	76.03	74.91	8.66%
2021	July	73.29	75.53	74.41	7.93%)
##setwd("C:/Users/Lenovo/Google Drive/R files/DataProjects/India/RBI data/IndiaTrade/charts")
library(readr)
TradeData <- read_csv("C:/Users/Lenovo/Google Drive/R files/DataProjects/India/RBI data/IndiaTrade/TradeData.csv",
col_types = cols(Category = col_factor(levels = c("Merchandise",
"Services")),
Export_Import = col_factor(levels = c("Exports","Imports"))),
skip = 1)
View(TradeData)
library(ggplot2)
p <- ggplot(data = TradeData,
aes(x= Year, y= USD_Value, colour = Export_Import, group = Export_Import)) +
#geom_area()
geom_line(size = 1.2) + geom_point(size = 2)
p + facet_grid(Category ~., scales= "free") +
labs (title = "India's Exports and Imports over the last 5 years",
subtitle = "Data for 2019-20 is a projection from Apr-Jul data",
caption = "source: http://dashboard.commerce.gov.in/",
y = "US Dollars billions",
colour = "") +
scale_colour_manual(values = c("dark red", "blue"))
## Corona data from European CDC
## from https://www.bbc.co.uk/news/world-51235105
## data updated as of 15 April 2020
#setwd("C:/Users/Jammi/Google Drive/R files/DataProjects/Corona")
library(tidyverse)
library(cowplot)
library(forecast)
library(gridExtra)
data <- read.csv(url("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"))
data$countriesAndTerritories <- gsub("United_States_of_America", "USA", data$countriesAndTerritories)
data$countriesAndTerritories <- gsub("United_Kingdom", "UK", data$countriesAndTerritories)
d <- data  %>%
mutate(ReportingDate = as.Date(as.character(dateRep), format = "%d/%m/%Y")) %>%
group_by(countriesAndTerritories) %>%
arrange(ReportingDate, .by_group = TRUE) %>%
mutate(CasesToDate = cumsum(cases),
DeathsToDate = cumsum(deaths)) %>%
#select(ReportingDate, countriesAndTerritories, cases, deaths,
# CasesToDate, DeathsToDate) %>%
mutate(CasesDoublingTime = log(2)/log(CasesToDate/lag(CasesToDate)),
DeathsDoublingTime = log(2)/log(DeathsToDate/lag(DeathsToDate)) ) %>%
ungroup() %>%
rename(Country = countriesAndTerritories,
CountryCode = countryterritoryCode,
Continent = continentExp
)
sickest <- d %>%
group_by(Country) %>%
summarise(CasesToDate = max(CasesToDate),
DeathsToDate = max(DeathsToDate),
DeathRate = round(100 * DeathsToDate/CasesToDate, 1)) %>%
arrange(desc(CasesToDate)) %>%
ungroup()
## To extract the most recet reporting date for the title in the charts
RepDate <- d %>%
group_by(Country) %>%
summarise(latest = last(ReportingDate))
Date.Upto <- filter(RepDate, Country == "UK")$latest  ## the most recent date for the UK
top16countries <- as.character(sickest$Country[1:16])
#1. Lollipop chart of top 25 countries tally of cases to date
## to reorder the levels of the Country names
sickest$Country <- reorder(sickest$Country, sickest$CasesToDate, FUN = identity)
summary.text <- paste("Worldwide there have been \n",
format(sum(sickest$CasesToDate), big.mark= ","),
"reported cases and ",
format(sum(sickest$DeathsToDate), big.mark= ","),
"deaths. \nIndia has had", format( subset(sickest, Country == "India")[[1,2]], big.mark=","),
"cases and", subset(sickest, Country == "India")[[1,3]],
"deaths"
)
p1 <- ggplot(data =sickest[2:25, ],
aes(x=Country, y = CasesToDate)) +
geom_point(stat="identity",position="identity", size=3.0, colour = "red") +
geom_bar(stat="identity", width = 0.1, fill = "blue") +
scale_x_discrete("") +
scale_y_continuous(breaks = c(0,25000,50000, 75000, 400000, 125000, 150000, 175000, 200000),
labels = c("0", "25k", "50k", "75k", "100k", "125k", "150k", "175k", "200k"),
name = "Cumulative tally of cases") +
coord_flip() +
annotate("text", x = 9, y = 150000, label = summary.text, size = 6) +
labs(title = "Covid19 across the world. \nThe top 25 countries by number of reported cases",
subtitle = paste("America, with", format(sickest[[1,2]], big.mark=","), "cases and", format(sickest[[1,3]], big.mark = ","), "deaths has been excluded." ),
caption = paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y") )
)
p1
ggsave(plot = p1, file=paste0("lollipopchart", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
width=10, height =12, units = "in",
path = "CovidTrackerV2")
p2 <- d %>% #p2 is cumulative cases time trend
filter(Country %in% top16countries & ReportingDate > as.Date("2020/03/15")) %>%
ggplot(aes(x = ReportingDate, y = CasesToDate,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
facet_wrap(.~Country, scales = "free") +
#scale_x_date(date_breaks = "4 weeks",date_labels = "%b\n %y") +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15\nMar", "15\nApr") ) +
labs(title = "How the number of cases grew over time",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each country",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Cumulative count of cases")+
theme(legend.position = "none",
axis.text.x = element_text(size = rel(0.7)))
p2
ggsave(plot = p1, file=paste0("lollipopchart", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
width=10, height =12, units = "in",
path = "CovidTrackerV2")
p3 <- d %>%  # p3 is cumulative deaths time trend
filter(Country %in% top16countries & ReportingDate > as.Date("2020/03/15")) %>%
ggplot(aes(x = ReportingDate, y = DeathsToDate,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
facet_wrap(.~Country, scales = "free") +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
labs(title = "How the number of deaths grew over time",
subtitle = "Cumulative tally of deaths from Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each country",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Cumulative count of deaths")+
theme(legend.position = "none")
p3
## **********************
p4 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageCases = ma(cases, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageCases,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "The daily number of cases of Covid19",
subtitle  = "3-day moving average of the daily number of cases ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Daily Cases")+
theme(legend.position = "none")
p4
##*********************************
#time trend of daily deaths
p5 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDeaths = ma(deaths, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDeaths,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "The daily number of deaths from Covid19",
subtitle  = "3-day moving average of the daily number of deaths ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Daily Cases")+
theme(legend.position = "none")
p5
##************************************
#Doublin times
p6 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDoublingTime = ma(CasesDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDoublingTime,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time for Cumulative number of cases of Covid19",
subtitle  = "3-day moving average of the daily doubling time ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Doubling time in days")+
theme(legend.position = "none")
p6
##*******************************************
#Deaths doubling time
p7 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(DeathsMovAverageDoublingTime = ma(DeathsDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = DeathsMovAverageDoublingTime,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time for Cumulative deaths from Covid19",
subtitle  = "3-day moving average of the daily doubling time ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Doubling time in days")+
theme(legend.position = "none")
p7
ggsave(plot=p7,
file =paste0("Top16CountriesDeathsDoublingTime", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
path = "CovidTrackerV2", width = 10, height = 8, units = "in")
##***********************
## India specific charts
# 1. Cases and deaths cumulative time charts
## cases
p4.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageCases = ma(cases, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageCases)) +
geom_line(colour = "red", size = 1.2) +
#geom_line(aes(y= MovAverageDeaths), colour = "blue", size = 1.3) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
labs(title = "India: daily cases ",
subtitle  = "3-day moving average",
# caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
#                © JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "")+
theme(legend.position = "none")
p4.india
# ggsave(plot=p4.india,
#        file =paste0("IndiaCasesTrend", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
#        path = "CovidTrackerV2", width = 8, height = 6, units = "in")
## deaths
p5.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDeaths = ma(deaths, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDeaths)) +
geom_line(colour = "red", size = 1.2) +
#geom_line(aes(y= MovAverageDeaths), colour = "blue", size = 1.3) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
labs(title = "Daily deaths",
subtitle  = "3-day moving average ",
# caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
#                © JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "")+
theme(legend.position = "none")
p5.india
# ggsave(plot=p5.india,
#        file =paste0("IndiaDeathsTrend", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
#        path = "CovidTrackerV2", width = 8, height = 6, units = "in")
# 2. Doubling tme for cases and deaths
##doubling time for cases
p6.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDoublingTime = ma(CasesDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDoublingTime)) +
geom_line(colour = "red", size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
#facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time, cases",
subtitle  = "3-day moving average",
# caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
#                © JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "days")+
theme(legend.position = "none")
p6.india
## doubling time for deaths
p7.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDoublingTime = ma(DeathsDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDoublingTime)) +
geom_line(colour = "red", size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
#facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time, deaths",
subtitle  = "3-day moving average",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "days")+
theme(legend.position = "none")
p7.india
grid.arrange(p4.india, p5.india, p6.india, p7.india)
setwd("C:/Users/Lenovo/Google Drive/R files/DataProjects/Corona/Corona")
install.packages("ggrepel")
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
head(sickest, 20)
data <- read.csv(url("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"))
data$countriesAndTerritories <- gsub("United_States_of_America", "USA", data$countriesAndTerritories)
data$countriesAndTerritories <- gsub("United_Kingdom", "UK", data$countriesAndTerritories)
d <- data  %>%
mutate(ReportingDate = as.Date(as.character(dateRep), format = "%d/%m/%Y")) %>%
group_by(countriesAndTerritories) %>%
arrange(ReportingDate, .by_group = TRUE) %>%
mutate(CasesToDate = cumsum(cases),
DeathsToDate = cumsum(deaths)) %>%
#select(ReportingDate, countriesAndTerritories, cases, deaths,
# CasesToDate, DeathsToDate) %>%
mutate(CasesDoublingTime = log(2)/log(CasesToDate/lag(CasesToDate)),
DeathsDoublingTime = log(2)/log(DeathsToDate/lag(DeathsToDate)) ) %>%
ungroup() %>%
rename(Country = countriesAndTerritories,
CountryCode = countryterritoryCode,
Continent = continentExp
)
sickest <- d %>%
group_by(Country) %>%
summarise(CasesToDate = max(CasesToDate),
DeathsToDate = max(DeathsToDate),
DeathRate = round(100 * DeathsToDate/CasesToDate, 1)) %>%
arrange(desc(CasesToDate)) %>%
ungroup()
## To extract the most recet reporting date for the title in the charts
RepDate <- d %>%
group_by(Country) %>%
summarise(latest = last(ReportingDate))
Date.Upto <- filter(RepDate, Country == "India")$latest  ## the most recent date for the UK
top16countries <- as.character(sickest$Country[1:16])
hed(sickest, 20)
head(sickest,20)
head(sickest,40)
View(head(sickest,40))
