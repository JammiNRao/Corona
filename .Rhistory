labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
nrow=2, ncol=3)
p9.india <- ggplot(df, aes(x, y)) + ## just a blank chart for the label
geom_blank() +
scale_x_continuous(name="", breaks = NULL, labels=NULL) +
scale_y_continuous(name="", breaks = NULL, labels=NULL) +
annotate(geom = "text", x=5, y=5,
label = "Reported Data from India", size = 6 )
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
nrow=2, ncol=3)
p9.india <- ggplot(df, aes(x, y)) + ## just a blank chart for the label
geom_blank() +
scale_x_continuous(name="", breaks = NULL, labels=NULL) +
scale_y_continuous(name="", breaks = NULL, labels=NULL) +
annotate(geom = "text", x=5, y=5,
label = "Reported Data\n from India", size = 6 )
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
nrow=2, ncol=3)
?scale_y_continuous
p8.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
# mutate(MovAverageDoublingTime = ma(CasesDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = CasesToDate)) +
geom_line(colour = "red", size = 1.2) +
scale_x_date(name = "",
breaks = as.Date(c("2020/03/15", "2020/04/01",
"2020/04/15", "2020/05/01", "2020/05/15")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay", "15\nMay") ) +
scale_y_continuous(name="",limits = c(0, 100000))
p8.india
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10,
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = 0.2,
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = 0.4, label_y = 0.8
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = 0.4, label_y = 0.8,
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = c(0, 0.3,0.2,0.2,0.2) label_y = 0.95,
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(1.1,1),
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(1.2,1),
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(1.2,1,1),
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 10, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(0.8,1,1),
nrow=2, ncol=3)
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 12, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(0.8,1,1),
nrow=2, ncol=3)
p9.india <- ggplot(df, aes(x, y)) + ## just a blank chart for the label
geom_blank() +
scale_x_continuous(name="", breaks = NULL, labels=NULL) +
scale_y_continuous(name="", breaks = NULL, labels=NULL) +
annotate(geom = "text", x=5, y=5,
label = "Reported Data\n from India as upto\n as.character(Date.Upto, format = "%d %b %Y")"),
size = 6 )
as.character(Date.Upto, format = "%d %b %Y")
p9.india <- ggplot(df, aes(x, y)) + ## just a blank chart for the label
geom_blank() +
scale_x_continuous(name="", breaks = NULL, labels=NULL) +
scale_y_continuous(name="", breaks = NULL, labels=NULL) +
annotate(geom = "text", x=5, y=5,
label = "Reported Data \n from India as upto \n 15 May 2020" ,
size = 6 )
p9.india
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 12, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(0.8,1,1),
nrow=2, ncol=3)
p9.india <- ggplot(df, aes(x, y)) + ## just a blank chart for the label
geom_blank() +
scale_x_continuous(name="", breaks = NULL, labels=NULL) +
scale_y_continuous(name="", breaks = NULL, labels=NULL) +
annotate(geom = "text", x=5, y=6,
label = "Reported Data \n from India as upto \n 15 May 2020" ,
size = 6 )
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 12, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(0.8,1,1),
nrow=2, ncol=3)
p8.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
# mutate(MovAverageDoublingTime = ma(CasesDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = CasesToDate)) +
geom_line(colour = "red", size = 1.2) +
scale_x_date(name = "",
breaks = as.Date(c("2020/03/15", "2020/04/01",
"2020/04/15", "2020/05/01", "2020/05/15")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay", "15\nMay") ) +
scale_y_continuous(name="",limits = c(0, 100000),
breaks = c(20000,40000,60000,80000),
labels = c("20k","40k","60k","80k"))
p8.india
plot_grid(p9.india, p8.india, p4.india, p5.india, p6.india, p7.india,
labels = c("", "Cases so far", "Daily cases", "Daily deaths",
"Doubling time: cases","Doubling time:deaths"),
label_size = 12, label_x = c(0, 0.3,0.2,0.2,0.2), label_y = 0.95,
rel_widths = c(0.8,1,1),
nrow=2, ncol=3)
library(tidyverse)
library(cowplot)
library(forecast)
library(gridExtra)
data <- read.csv(url("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"))
data$countriesAndTerritories <- gsub("United_States_of_America", "USA", data$countriesAndTerritories)
data$countriesAndTerritories <- gsub("United_Kingdom", "UK", data$countriesAndTerritories)
d <- data  %>%
mutate(ReportingDate = as.Date(as.character(dateRep), format = "%d/%m/%Y")) %>%
group_by(countriesAndTerritories) %>%
arrange(ReportingDate, .by_group = TRUE) %>%
mutate(CasesToDate = cumsum(cases),
DeathsToDate = cumsum(deaths)) %>%
#select(ReportingDate, countriesAndTerritories, cases, deaths,
# CasesToDate, DeathsToDate) %>%
mutate(CasesDoublingTime = log(2)/log(CasesToDate/lag(CasesToDate)),
DeathsDoublingTime = log(2)/log(DeathsToDate/lag(DeathsToDate)) ) %>%
ungroup() %>%
rename(Country = countriesAndTerritories,
CountryCode = countryterritoryCode,
Continent = continentExp
)
sickest <- d %>%
group_by(Country) %>%
summarise(CasesToDate = max(CasesToDate),
DeathsToDate = max(DeathsToDate),
DeathRate = round(100 * DeathsToDate/CasesToDate, 1),
Population = last(popData2018),
CountryCode = last(CountryCode)) %>%
arrange(desc(CasesToDate)) %>%
ungroup()
RepDate <- d %>%
group_by(Country) %>%
summarise(latest = last(ReportingDate))
Date.Upto <- filter(RepDate, Country == "UK")$latest  ## the most recent date for the UK
top16countries <- as.character(sickest$Country[1:16])
sickest$Country <- reorder(sickest$Country, sickest$CasesToDate, FUN = identity)
summary.text <- paste("Worldwide there have been \n",
format(sum(sickest$CasesToDate), big.mark= ","),
"reported cases and ",
format(sum(sickest$DeathsToDate), big.mark= ","),
"deaths. \nIndia has had", format( subset(sickest, Country == "India")[[1,2]], big.mark=","),
"cases and", subset(sickest, Country == "India")[[1,3]],
"deaths"
)
sickest <- mutate(sickest, ToHighlight = ifelse(Country == "India", "yes", "No"))
p1 <- ggplot(data =sickest[2:25, ],
aes(x=Country, y = CasesToDate )) +
geom_point(stat="identity",position="identity", size=3.0, colour = "red") +
geom_col(aes(fill=ifelse(Country == "India", "A", "B")), width = 0.22) +
scale_fill_manual(values = c(A="#FFFF00", B = "#0080FF")) +
scale_x_discrete("") +
scale_y_continuous(breaks = c(0,25000,50000, 75000, 400000, 125000, 150000, 175000, 200000, 250000, 300000),
labels = c("0", "25k", "50k", "75k", "100k", "125k", "150k", "175k", "200k", "250k", "300k"),
name = "Cumulative tally of cases") +
coord_flip() +
theme(legend.position = "none") +
annotate("text", x = 6, y = 175000, label = summary.text, size = 6) +
labs(title = "Covid19 across the world. \nThe top 25 countries by number of reported cases",
subtitle = paste("America, with", format(sickest[[1,2]], big.mark=","), "cases and", format(sickest[[1,3]], big.mark = ","), "deaths has been excluded." ),
caption = paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y") )
)
p1
p2 <- d %>% #p2 is cumulative cases time trend
filter(Country %in% top16countries & ReportingDate > as.Date("2020/03/15")) %>%
ggplot(aes(x = ReportingDate, y = CasesToDate,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
facet_wrap(.~Country, scales = "free") +
#scale_x_date(date_breaks = "4 weeks",date_labels = "%b\n %y") +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15\nMar", "15\nApr") ) +
labs(title = "How the number of cases grew over time",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each country",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Cumulative count of cases")+
theme(legend.position = "none",
axis.text.x = element_text(size = rel(0.7)))
?filter
d %>% #p2 is cumulative cases time trend
filter(Country %in% top16countries & ReportingDate > as.Date("2020/03/15"))
top8countries <- as.character(sickest$Country[1:8])
p2 <- d %>% #p2 is cumulative cases time trend
filter(Country %in% top8countries & ReportingDate > as.Date("2020/03/15")) %>%
filter()
p2 <- d %>% #p2 is cumulative cases time trend
filter(Country %in% top8countries & ReportingDate > as.Date("2020/03/15")) %>%
ggplot(aes(x = ReportingDate, y = CasesToDate,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
facet_wrap(.~Country, scales = "free") +
#scale_x_date(date_breaks = "4 weeks",date_labels = "%b\n %y") +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15\nMar", "15\nApr") ) +
labs(title = "How the number of cases grew over time",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each country",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Cumulative count of cases")+
theme(legend.position = "none",
axis.text.x = element_text(size = rel(0.7)))
p2
?facet_wrap
p2 <- d %>% #p2 is cumulative cases time trend
filter(Country %in% top8countries & ReportingDate > as.Date("2020/03/15")) %>%
ggplot(aes(x = ReportingDate, y = CasesToDate,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
facet_wrap(.~Country, scales = "free", ncol = 2) +
#scale_x_date(date_breaks = "4 weeks",date_labels = "%b\n %y") +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15\nMar", "15\nApr") ) +
labs(title = "How the number of cases grew over time",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each country",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Cumulative count of cases")+
theme(legend.position = "none",
axis.text.x = element_text(size = rel(0.7)))
p2
p2 <- d %>% #p2 is cumulative cases time trend
filter(Country %in% top8countries & ReportingDate > as.Date("2020/03/15")) %>%
ggplot(aes(x = ReportingDate, y = CasesToDate,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
facet_wrap(.~Country, scales = "free", nrow = 2) +
#scale_x_date(date_breaks = "4 weeks",date_labels = "%b\n %y") +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15\nMar", "15\nApr") ) +
labs(title = "How the number of cases grew over time",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each country",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Cumulative count of cases")+
theme(legend.position = "none",
axis.text.x = element_text(size = rel(0.7)))
p2
setwd("C:/Users/Jammi/Google Drive/R files/DataProjects/Corona")
library(tidyverse)
library(ggrepel)
library(reshape2)
library(forecast)
library(cowplot)
d.states <- read.csv(url("https://t.co/lfRdu7epRj?amp=1")) %>%
melt(id = c(1:2)) %>%
dcast(formula = Date + variable ~ Status,
value.var = "value") %>%
mutate(Date = as.Date(Date, format = "%d-%b-%y")) %>%
arrange(Date)
colnames(d.states) <- c("Date", "StateCode","Cases", "Deaths", "Recovered")
##***********************
#The data  file comes with State codes. So create a look up table with full state names()
state.codes <- unique(d.states$StateCode)
state.name  <- c("AllIndia", "Andaman and Nicobar", "Andhra Pradesh", "Arunachal Pradesh",
"Assam", "Bihar", "Chandigarh", "Chattisgarh", "Dadra and Nagar Haveli",
"Daman and Diu", "Delhi", "Goa", "Gujarat",
"Haryana", "Himachal Pradesh", "Jammu and Kashmir", "Jharkhand", "Karnataka",
"Kerala", "Lakshadweep", "Ladakh", "Madhya Pradesh", "Maharashtra",
"Manipur", "Meghalaya","Mizoram",
"Nagaland", "Odisha", "Puducherry", "Punjab", "Rajasthan",
"Sikkim", "Tamil Nadu", "Telangana",
"Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal", "UnAssigned")
state.population <- c(1250, 0.4, 51,1.4, 31.2, 105, 1.1, 25.9, 0.35, 0.25,17.0, 1.6, 61.5,
25.8, 6.9, 12.6, 33.5,62.1,
34.2,NA, NA,74.5,115.0,
2.9,3.1,1.2,
2.1, 42.1,1.4, 27.9,69.5,
NA, 72.9, 36.1,
3.7,201.5,11.2, 92.5, NA)
StatesIndia <- data.frame(state.codes, state.name, state.population,stringsAsFactors = FALSE)
##*******************************
d.states <- inner_join(d.states, StatesIndia, by = c("StateCode" = "state.codes"))
##*********************
#d is now the data we need and has the structure we need to analyse
# data.frame':	3354 obs. of  6 variables:
#  $ Date      : Date, format: "2020-03-14" "2020-03-14" "2020-03-14" ...
#  $ StateCode : Factor w/ 39 levels "TT","AN","AP",..: 1 2 3 4 5 6 7 8 9 10 ...
#  $ Cases     : int  81 0 1 0 0 0 0 0 0 0 ...
#  $ Deaths    : int  2 0 0 0 0 0 0 0 0 0 ...
#  $ Recovered : int  9 0 0 0 0 0 0 0 0 0 ...
#  $ state.name: chr  "AllIndia" "Andaman and Nicobar" "Andhra Pradesh" "Arunachal Pradesh" ...
##************************
d.states <- d.states %>%
group_by(StateCode) %>%
arrange(Date, .by_group = TRUE) %>%
mutate(CasesToDate = cumsum(Cases),
DeathsToDate = cumsum(Deaths),
RecoveriesToDate = cumsum(Recovered),
CFR = DeathsToDate / (DeathsToDate + RecoveriesToDate)) %>%
ungroup()
SickestState <- d.states %>%
group_by(StateCode) %>%
arrange(Date, .by_group = TRUE) %>%
summarise(CasesToDate = max(CasesToDate),
DeathsToDate = max(DeathsToDate),
RecoveredToDate = last(RecoveriesToDate),
DeathRate = last(CFR),
State.Population = last(state.population)) %>%
arrange(desc(CasesToDate)) %>%
ungroup()
#View(SickestState)
Date.Latest <- d.states[nrow(d.states),]$Date
##************
## plot1
SickestState$StateCode <- reorder(SickestState$StateCode, SickestState$DeathRate, FUN = identity)
plot1 <- SickestState[1:12, ] %>%
filter(! StateCode %in% c("UN","TT")) %>%
ggplot(aes(x=StateCode, y= DeathRate*100)) +
geom_point(stat="identity",position="identity", size=5.0, colour = "red") +
geom_col(width = 0.12, colour = "blue") +
coord_flip() +
scale_x_discrete("Top 10 States by No of infections") +
scale_y_continuous("%") +
labs(title = "Covid-19 Case fatality rate by State",
subtitle = "case fatality calculated as Deaths/(Deaths+Recovered)",
caption = paste("data source: https://t.co/lfRdu7epRj?amp=1,
© JayEnAar ", as.character(Date.Latest, format = "%d %b %Y") ) ) +
theme(axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot1
## ***********************************
##plot2
unallocated <- subset(SickestState, StateCode == "UN")$CasesToDate
SickestState$StateCode <- reorder(SickestState$StateCode, SickestState$CasesToDate, FUN = identity)
plot2 <- SickestState[1:12, ] %>%
filter(! StateCode %in% c("UN","TT")) %>%
ggplot(aes(x=StateCode, y= CasesToDate)) +
geom_point(stat="identity",position="identity", size=5.0, colour = "red") +
geom_col(width = 0.12, colour = "blue") +
coord_flip() +
scale_x_discrete("top 10 States") +
scale_y_continuous("",breaks = c(1000, 10000, 20000, 30000,40000, 50000, 60000, 70000, 80000),
labels = c("1k", "10k", "20k", "30k", "40k", "50k", "60k", "70k", "80k")) +
labs(title = "Covid-19 Cumulative Number of cases by State",
subtitle = paste("excludes", unallocated, "cases that were not allocated to a State"),
caption = paste("data source: https://t.co/lfRdu7epRj?amp=1,
© JayEnAar & GorwayGlobal ",
as.character(Date.Latest, format = "%d %b %Y") ) ) +
theme(axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot2
##*********************************************
##********************************
#plot3 grid of states by epidemic curve
sickstates <- SickestState[1:14, ] %>%
filter(! StateCode %in% c("UN","TT"))
sickstatescodes <- as.character(sickstates$StateCode)
plot3 <- d.states %>%
filter(StateCode %in% sickstatescodes) %>%
ggplot(aes(x = Date, y = CasesToDate,
group = StateCode)) +
geom_line(aes(colour = StateCode), size = 1.2) +
facet_wrap(. ~ StateCode, scales = "free") +
labs(title = "How the number of cases grew over time",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each State",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar & GorwayGlobal ", as.character(Date.Latest, format = "%d %b %Y")),
x = "", y = "Cumulative count of cases")+
theme(legend.position = "none",
axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot3
##*************************
#plot4, scatter plot of population incidence and case fatality
plot4 <- SickestState[1:17, ] %>%
filter(! StateCode %in% c("UN","TT")) %>%
ggplot(aes( x= CasesToDate/State.Population,
y =DeathRate*100,
label = StateCode)) +
geom_point(colour = "dark red", size = 2.5) +
geom_text_repel(nudge_y = 0.5) +
scale_x_continuous("Cases per million population") +
scale_y_continuous("Case fatality rate - estimated") +
labs(title = "Indian States. Case fatality v Population incidence of Covid19",
subtitle = "Case Fatality defined as deaths/(deaths+recovered); State populations are estimates",
caption = paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
(c) JayEnAar ", as.character(Date.Latest, format = "%d %b %Y") ) ) +
theme(axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12) )
plot4
# india <- d.states %>%
#     filter(StateCode == "TT") %>%
#     select(c(1,3))
# library(forecast)
# india.cases.ts <- as.ts(india$Cases, start = as.Date("2020.03/14"), frequency = 365)
# autoplot(india.cases.ts)
##**************************
plot5 <- d.states %>%
filter(StateCode == "TT") %>%
ggplot(aes(x = Date, y = CasesToDate)) +
geom_line(colour = "red", size = 1.2) +
labs(title = "How India's epidemic grew",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards",
caption =paste("data source: https://t.co/lfRdu7epRj?amp=1,
© JayEnAar & GorwayGlobal ", as.character(Date.Latest, format = "%d %b %Y")),
x = "") +
scale_y_continuous("Cumulative count of cases",
breaks = c(50000, 100000, 150000, 200000, 250000, 300000),
labels = c("50k", "100k", "150k", "200k", "250k", "300k")) +
theme(legend.position = "none",
axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot5
ggsave(plot5, filename = "IndiaCumulCases.png", width=8, height = 6, units = "in",
path = "CovidTrackerV2")
plot6 <- d.states %>%
filter(StateCode == "TT") %>%
ggplot(aes(x = Date, y = ma(Cases, 5))) +
geom_line(colour = "red", size = 1.2) +
labs(title = "How India's epidemic grew",
subtitle = "Daily tally of cases of Covid19, 16 March 2020 onwards",
caption =paste("data source: https://t.co/lfRdu7epRj?amp=1,
© JayEnAar & GorwayGlobal ", as.character(Date.Latest, format = "%d %b %Y")),
x = "") +
scale_y_continuous("Daily count of cases - 5 day moving average") +
theme(legend.position = "none",
axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot6
ggsave(plot6, filename = "IndiaDailyCases.png", width=8, height = 6, units = "in",
path = "CovidTrackerV2")
plot_grid(plot5,plot6, ncol=2, labels = c("A:Total Cases","B:Daily Cases" ))
plot_grid(plot5,plot6, ncol=1, labels = c("A:Total Cases","B:Daily Cases" ))
plot6 <- d.states %>%
filter(StateCode == "TT") %>%
ggplot(aes(x = Date, y = ma(Cases, 5))) +
geom_line(colour = "red", size = 1.2)
plot5 <- d.states %>%
filter(StateCode == "TT") %>%
ggplot(aes(x = Date, y = CasesToDate)) +
geom_line(colour = "red", size = 1.2)
plot_grid(plot5,plot6, ncol=1, labels = c("A:Total Cases","B:Daily Cases" ))
plot_grid(plot5,plot6, ncol=2, labels = c("A:Total Cases","B:Daily Cases" ))
setwd("C:/Users/Jammi/Google Drive/R files/DataProjects/Corona/Corona")
