group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
facet_wrap(.~Country, scales = "free") +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
labs(title = "How the number of deaths grew over time",
subtitle = "Cumulative tally of deaths from Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each country",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Cumulative count of deaths")+
theme(legend.position = "none")
p3
## **********************
p4 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageCases = ma(cases, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageCases,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "The daily number of cases of Covid19",
subtitle  = "3-day moving average of the daily number of cases ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Daily Cases")+
theme(legend.position = "none")
p4
##*********************************
#time trend of daily deaths
p5 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDeaths = ma(deaths, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDeaths,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "The daily number of deaths from Covid19",
subtitle  = "3-day moving average of the daily number of deaths ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Daily Cases")+
theme(legend.position = "none")
p5
##************************************
#Doublin times
p6 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDoublingTime = ma(CasesDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDoublingTime,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time for Cumulative number of cases of Covid19",
subtitle  = "3-day moving average of the daily doubling time ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Doubling time in days")+
theme(legend.position = "none")
p6
##*******************************************
#Deaths doubling time
p7 <- d %>% filter(Country %in% top16countries &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(DeathsMovAverageDoublingTime = ma(DeathsDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = DeathsMovAverageDoublingTime,
group = Country)) +
geom_line(aes(colour = Country), size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/15")),
labels = c("15Mar", "15Apr") ) +
facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time for Cumulative deaths from Covid19",
subtitle  = "3-day moving average of the daily doubling time ",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "Doubling time in days")+
theme(legend.position = "none")
p7
ggsave(plot=p7,
file =paste0("Top16CountriesDeathsDoublingTime", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
path = "CovidTrackerV2", width = 10, height = 8, units = "in")
##***********************
## India specific charts
# 1. Cases and deaths cumulative time charts
## cases
p4.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageCases = ma(cases, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageCases)) +
geom_line(colour = "red", size = 1.2) +
#geom_line(aes(y= MovAverageDeaths), colour = "blue", size = 1.3) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
labs(title = "India: daily cases ",
subtitle  = "3-day moving average",
# caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
#                © JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "")+
theme(legend.position = "none")
p4.india
# ggsave(plot=p4.india,
#        file =paste0("IndiaCasesTrend", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
#        path = "CovidTrackerV2", width = 8, height = 6, units = "in")
## deaths
p5.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDeaths = ma(deaths, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDeaths)) +
geom_line(colour = "red", size = 1.2) +
#geom_line(aes(y= MovAverageDeaths), colour = "blue", size = 1.3) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
labs(title = "Daily deaths",
subtitle  = "3-day moving average ",
# caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
#                © JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "")+
theme(legend.position = "none")
p5.india
# ggsave(plot=p5.india,
#        file =paste0("IndiaDeathsTrend", as.character(Date.Upto, format = "%d%m%Y"), ".png" ),
#        path = "CovidTrackerV2", width = 8, height = 6, units = "in")
# 2. Doubling tme for cases and deaths
##doubling time for cases
p6.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDoublingTime = ma(CasesDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDoublingTime)) +
geom_line(colour = "red", size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
#facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time, cases",
subtitle  = "3-day moving average",
# caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
#                © JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "days")+
theme(legend.position = "none")
p6.india
## doubling time for deaths
p7.india <- d %>% filter(Country == "India" &
ReportingDate > as.Date("2020/03/15") ) %>%
mutate(MovAverageDoublingTime = ma(DeathsDoublingTime, order = 3)) %>%
ggplot(aes(x = ReportingDate, y = MovAverageDoublingTime)) +
geom_line(colour = "red", size = 1.2) +
scale_x_date(breaks = as.Date(c("2020/03/15", "2020/04/01", "2020/04/15", "2020/05/01")),
labels = c("15\nMar", "01\nApr", "15\nApr", "01\nMay") ) +
#facet_wrap(.~Country, scales = "free") +
labs(title = "Doubling time, deaths",
subtitle  = "3-day moving average",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar ", as.character(Date.Upto, format = "%d %b %Y")),
x = "", y = "days")+
theme(legend.position = "none")
p7.india
grid.arrange(p4.india, p5.india, p6.india, p7.india)
rm(ls())
ls()
rm(ls())
?rm
rm(list = ls())
d.states <- read.csv(url("https://t.co/lfRdu7epRj?amp=1"))
str(d.states)
head(d.states)
head(d.states[,1:10])
d.states <- read.csv(url("https://t.co/lfRdu7epRj?amp=1")) %>%
melt(id = c(1:2))
## States Covid19
library(tidyverse)
library(ggrepel)
library(reshape2)
d.states <- read.csv(url("https://t.co/lfRdu7epRj?amp=1")) %>%
melt(id = c(1:2))
str(d.states)
head(d.states)
random(5)
sample(5)
sample(100,5)
head(d.states[sample(10530, 10),], 10)
cases <- read.table(file = "1320
1,752
1,978
1,066
1,396
1,543
1,897
1,718
1,993
2,323
2,897
3,941
2,229
2,958
3,561
3,390
3,320
3,277
4,213
3,604
3,525
3,722
3,967
3,970
4,987
5,242
4,970
5,611
5,609
6,088
6,702
6,771
6,616
6,844
6,386
6,567
7,465
7,965
8,379
8392
8,571
8,908
9,305
9,851
9,887
9,971
11,644
8,326
9,985
10,572
10,380
12,068")
cases <- read.table( file = "1320
1,752
1,978
1,066
1,396
1,543
1,897
1,718
1,993
2,323
2,897
3,941
2,229
2,958
3,561
3,390
3,320
3,277
4,213
3,604
3,525
3,722
3,967
3,970
4,987
5,242
4,970
5,611
5,609
6,088
6,702
6,771
6,616
6,844
6,386
6,567
7,465
7,965
8,379
8392
8,571
8,908
9,305
9,851
9,887
9,971
11,644
8,326
9,985
10,572
10,380
12,068")
?read.table
## States Covid19
library(tidyverse)
library(ggrepel)
library(reshape2)
d.states <- read.csv(url("https://t.co/lfRdu7epRj?amp=1")) %>%
melt(id = c(1:2)) %>%
dcast(formula = Date + variable ~ Status,
value.var = "value") %>%
mutate(Date = as.Date(Date, format = "%d-%b-%y")) %>%
arrange(Date)
colnames(d.states) <- c("Date", "StateCode","Cases", "Deaths", "Recovered")
head(d.states)
head(d.states[StateCode="TT". ])
head(d.states[StateCode == "TT". ])
head(d.states[StateCode == "TT", ])
head(d.states[d.states$StateCode == "TT", ])
tail(d.states[d.states$StateCode == "TT", ])
plot(d.states[d.states$StateCode == "TT", ]$Cases)
plot(d.states[d.states$StateCode == "TT", ]$Cases, type = "l")
##***********************
#The data  file comes with State codes. So create a look up table with full state names()
state.codes <- unique(d.states$StateCode)
state.name  <- c("AllIndia", "Andaman and Nicobar", "Andhra Pradesh", "Arunachal Pradesh",
"Assam", "Bihar", "Chandigarh", "Chattisgarh", "Dadra and Nagar Haveli",
"Daman and Diu", "Delhi", "Goa", "Gujarat",
"Haryana", "Himachal Pradesh", "Jammu and Kashmir", "Jharkhand", "Karnataka",
"Kerala", "Lakshadweep", "Ladakh", "Madhya Pradesh", "Maharashtra",
"Manipur", "Meghalaya","Mizoram",
"Nagaland", "Odisha", "Puducherry", "Punjab", "Rajasthan",
"Sikkim", "Tamil Nadu", "Telangana",
"Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal", "UnAssigned")
state.population <- c(1250, 0.4, 51,1.4, 31.2, 105, 1.1, 25.9, 0.35, 0.25,17.0, 1.6, 61.5,
25.8, 6.9, 12.6, 33.5,62.1,
34.2,NA, NA,74.5,115.0,
2.9,3.1,1.2,
2.1, 42.1,1.4, 27.9,69.5,
NA, 72.9, 36.1,
3.7,201.5,11.2, 92.5, NA)
StatesIndia <- data.frame(state.codes, state.name, state.population,stringsAsFactors = FALSE)
d.states <- inner_join(d.states, StatesIndia, by = c("StateCode" = "state.codes"))
d.states <- d.states %>%
group_by(StateCode) %>%
arrange(Date, .by_group = TRUE) %>%
mutate(CasesToDate = cumsum(Cases),
DeathsToDate = cumsum(Deaths),
RecoveriesToDate = cumsum(Recovered),
CFR = DeathsToDate / (DeathsToDate + RecoveriesToDate)) %>%
ungroup()
SickestState <- d.states %>%
group_by(StateCode) %>%
arrange(Date, .by_group = TRUE) %>%
summarise(CasesToDate = max(CasesToDate),
DeathsToDate = max(DeathsToDate),
RecoveredToDate = last(RecoveriesToDate),
DeathRate = last(CFR),
State.Population = last(state.population)) %>%
arrange(desc(CasesToDate)) %>%
ungroup()
#View(SickestState)
Date.Latest <- d.states[nrow(d.states),]$Date
##************
## plot1
SickestState$StateCode <- reorder(SickestState$StateCode, SickestState$DeathRate, FUN = identity)
plot1 <- SickestState[1:12, ] %>%
filter(! StateCode %in% c("UN","TT")) %>%
ggplot(aes(x=StateCode, y= DeathRate*100)) +
geom_point(stat="identity",position="identity", size=5.0, colour = "red") +
geom_col(width = 0.12, colour = "blue") +
coord_flip() +
scale_x_discrete("Top 10 States by No of infections") +
scale_y_continuous("%") +
labs(title = "Covid-19 Case fatality rate by State",
subtitle = "case fatality calculated as Deaths/(Deaths+Recovered)",
caption = paste("data source: https://t.co/lfRdu7epRj?amp=1,
© JayEnAar ", as.character(Date.Latest, format = "%d %b %Y") ) ) +
theme(axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot1
## ***********************************
##plot2
unallocated <- subset(SickestState, StateCode == "UN")$CasesToDate
SickestState$StateCode <- reorder(SickestState$StateCode, SickestState$CasesToDate, FUN = identity)
plot2 <- SickestState[1:12, ] %>%
filter(! StateCode %in% c("UN","TT")) %>%
ggplot(aes(x=StateCode, y= CasesToDate)) +
geom_point(stat="identity",position="identity", size=5.0, colour = "red") +
geom_col(width = 0.12, colour = "blue") +
coord_flip() +
scale_x_discrete("top 10 States") +
scale_y_continuous("",breaks = c(1000, 10000, 20000, 30000,40000, 50000, 60000, 70000, 80000),
labels = c("1k", "10k", "20k", "30k", "40k", "50k", "60k", "70k", "80k")) +
labs(title = "Covid-19 Cumulative Number of cases by State",
subtitle = paste("excludes", unallocated, "cases that were not allocated to a State"),
caption = paste("data source: https://t.co/lfRdu7epRj?amp=1,
© JayEnAar & GorwayGlobal ",
as.character(Date.Latest, format = "%d %b %Y") ) ) +
theme(axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot2
##********************************
#plot3 grid of states by epidemic curve
sickstates <- SickestState[1:14, ] %>%
filter(! StateCode %in% c("UN","TT"))
sickstatescodes <- as.character(sickstates$StateCode)
plot3 <- d.states %>%
filter(StateCode %in% sickstatescodes) %>%
ggplot(aes(x = Date, y = CasesToDate,
group = StateCode)) +
geom_line(aes(colour = StateCode), size = 1.2) +
facet_wrap(. ~ StateCode, scales = "free") +
labs(title = "How the number of cases grew over time",
subtitle = "Cumulative tally of cases of Covid19, 16 March 2020 onwards
Caution:The Y-axis is not the same for each State",
caption =paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
© JayEnAar & GorwayGlobal ", as.character(Date.Latest, format = "%d %b %Y")),
x = "", y = "Cumulative count of cases")+
theme(legend.position = "none",
axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(face= "bold", size = 12) )
plot3
##*************************
#plot4, scatter plot of population incidence and case fatality
plot4 <- SickestState[1:17, ] %>%
filter(! StateCode %in% c("UN","TT")) %>%
ggplot(aes( x= CasesToDate/State.Population,
y =DeathRate*100,
label = StateCode)) +
geom_point(colour = "dark red", size = 2.5) +
geom_text_repel(nudge_y = 0.5) +
scale_x_continuous("Cases per million population") +
scale_y_continuous("Case fatality rate - estimated") +
labs(title = "Indian States. Case fatality v Population incidence of Covid19",
subtitle = "Case Fatality defined as deaths/(deaths+recovered); State populations are estimates",
caption = paste("data source: https://opendata.ecdc.europa.eu/covid19/casedistribution/csv,
(c) JayEnAar ", as.character(Date.Latest, format = "%d %b %Y") ) ) +
theme(axis.text = element_text(face = "bold", size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12) )
plot4
d <- read.table(header = TRUE, sep = ",", text =
"State,	StateCode,	TotalCases,	NewCases,	Recovered,	Deaths
Maharashtra,MH,	50231,	3041,	14600,	1635
Tamil Nadu,TN,	16277,	765,	8324,	111
Gujarat,GJ,	14063,	394,	6412,	858
Delhi,DL,	13418,	508,	6540,	261
Rajasthan,RJ,	6915,	286,	3743,	163
Madhya Pradesh,MP,	6665,	294,	3408,	290
Uttar Pradesh, UP,	6268,	251,	3538,	161
West Bengal,WB,	3667,	208,	1339,	272
Andhra Pradesh,AP,	2627,	66,	1897,	56
Bihar,BH,2574,	180,	702,	13"
)
india <- d.states %>%
filter(StateCode = "TT") %>%
as.ts(Cases, frequency = 365, start = as.Date("2020/03/14"))
india <- d.states %>%
filter(StateCode == "TT") %>%
as.ts(Cases, frequency = 365, start = as.Date("2020/03/14"))
str(India)
india <- d.states %>%
filter(StateCode == "TT") %>%
as.ts(Cases, frequency = 365, start = as.Date("2020/03/14"))
str(india)
india <- d.states %>%
filter(StateCode == "TT") %>%
as.ts(d.states$Cases, frequency = 365, start = as.Date("2020/03/14"))
str(india)
india <- d.states %>%
filter(StateCode == "TT") %>%
ts(d.states$Cases, frequency = 365, start = as.Date("2020/03/14"))
str(india)
d.states %>%
filter(StateCode == "TT")
india <- d.states %>%
filter(StateCode == "TT")
str(india)
india <- d.states %>%
filter(StateCode == "TT") %>%
select(c(1,3))
india
library(forecast)
india.cases.ts <- as.xts(india)
india.cases.ts <- as.ts(india)
plot(india.cases.ts)
?arima
arima(india.cases.ts)
arima(india.cases.ts$Cases)
class(india.cases.ts)
auto.arima(india.cases.ts)
india.cases.ts
india.cases.ts <- as.ts(india$Cases, start = as.Date("2020.03/14"), frequency = 365)
plot(india.cases.ts)
auto.arima(india.cases.ts)
plot.Arima(auto.arima(india.cases.ts))
library(forecast)
plot.Arima(auto.arima(india.cases.ts))
forecast(india.cases.ts)
forecast(india.cases.ts, 20)
class(forecast(india.cases.ts, 20))
plot.forecast(forecast(india.cases.ts, 20))
autoplot(india.cases.ts)
autoplot(forecast(india.cases.ts))
data <- read.csv(url("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"))
data <- read.csv(url("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"))
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE
)
data <- read.csv(url("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"))
data <- read.csv(url("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"))
setwd("C:/Users/Lenovo/Google Drive/R files/DataProjects/Corona/Corona")
